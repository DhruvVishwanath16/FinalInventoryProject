#Author: Group 6 - Matthew Chen (mac22534) and Kyra Burke (ktb793)
#Homework number and name: Final Project 
#Due Date: May 14th, 2021
#Program Description: Creating a program that manages inventory 

import inventory
import transactionitem

def process_inventory():
    inventory_list = []
    infile = open('Inventory.txt','r')        

    item_id = infile.readline().rstrip('\n')
    while item_id != '':
            
        name = infile.readline().rstrip('\n')
        stock = infile.readline().rstrip('\n')
        price = infile.readline().rstrip('\n')
        inv = inventory.Inventory
        item = inv(int(item_id), name, int(stock), float(price))
        
        inventory_list.append(item)
        item_id = infile.readline().rstrip('\n')
        
    return inventory_list

def print_inventory(inventory_list):
    print('ID \t\tItem \t\t\t\t\t\t   Price   Stock')
    for item in inventory_list:
        print(item)
    print('Enter 0 when finished.')
    print()
    
def get_item_id(inventory_list):
    item_id_validity = False
    while item_id_validity == False:
        item_id_input = input('Please input the item id you wish to purchase/return: ')
        try:
            item_id_input = int(item_id_input)
        except:
            print('Input was invalid.')
            continue
        if item_id_input == 0:
            item_id_validity = True
        else:
            for item in inventory_list:
                if item.get_item_id() == item_id_input:
                    item_id_validity = True
            if item_id_validity == False:
                print('Input was invalid.')
    return item_id_input

def write_updated_inventory(inventory_list):
    updatedtxt = open('UpdatedInventory.txt', 'w')
    for item in inventory_list:
        updatedtxt.write(str(item.get_item_id()) + '\n')
        updatedtxt.write(str(item.get_name()) + '\n')
        updatedtxt.write(str(item.get_stock()) + '\n')
        updatedtxt.write(str(item.get_price()) + '\n')
        
def print_invoice(transactional_list):
    item_total = 0
    subtotal = 0
    for item in transactional_list:
        item_total += item.get_qty()
        subtotal += item.calc_cost()
        
    if item_total != 0:
        print()
        print('ID \t\tItem \t\t\t\t\t Qty \t Price \t Total')
        for item in transactional_list:
            print(item)
        tax = subtotal * .085
        total = subtotal + tax
        print('\nPrice: $' + format(subtotal, '.2f'))
        print('Tax: $' + format(tax, '.2f'))
        print('Total: $' + format(total, '.2f'))
    else:
        print()
        
def main():
    inventory_list = process_inventory()
    transactional_list = []
    loop = True
    while loop == True:
        print_inventory(inventory_list)
        item_id_input = get_item_id(inventory_list)
        qty_validity = False
        if item_id_input == 0:
            qty_validity = True
            loop = False
            #break
        while qty_validity == False:
            qty_input = input('Please enter the desired quantity (negative quantity for returns): ')
            try:
                qty_input = int(qty_input)
                for item in inventory_list:
                    if item.get_item_id() == item_id_input:
                        if qty_input > 0:
                            qty_validity = item.purchase(qty_input)
                        else: 
                            qty_validity = item.restock(qty_input)
                        if qty_validity == True:
                            trans = transactionitem.TransactionItem
                            new_transaction = trans(item.get_item_id(),
                                                              item.get_name(),
                                                              qty_input,
                                                              item.get_price())
                            new_transaction.get_item_id()
                            transactional_list.append(new_transaction)
            except:
                print()
                print('Sorry, we do not have enough stock.')
                break
                print_inventory(inventory_list)
            if qty_validity == False:
                print()
                print('Sorry, we do not have enough stock.')
                break
                print_inventory(inventory_list)
        print()
    print_invoice(transactional_list)
    write_updated_inventory(inventory_list)

main()
