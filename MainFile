#Author: Grant Shaffer & Dhruv Vishwanath
#Assignment: Final project main
#Date: 11/28/22
#Program Description: Main file for final project

import TransactionItem
import Inventory


def process_inventory():
    inventory_data = open('Inventory.txt','r')
    prod_id = inventory_data.readline().rstrip('\n')
    list_products = []
    while prod_id != '':
        prod_name = inventory_data.readline().rstrip('\n')
        prod_qty = inventory_data.readline().rstrip('\n')
        prod_price = inventory_data.readline().rstrip('\n')
        
        inv = Inventory.Inventory
        prod = inv(int(prod_id), prod_name, int(prod_qty), float(prod_price))
        
        list_products.append(prod)
        prod_id = inventory_data.readline().rstrip('\n')
    return list_products
    inventory_data.close()


def print_inventory(list_products):
    print('ID \t\tItem \t\t\t\t\t\t\t\t Price \t Stock')
    for prod in list_products:
        print(prod)
    print('\nEnter 0 when finished. \n')
   
    
def get_item_id(list_products):
    action = 0
    while action == 0:
        id_input = input('Please enter the item ID you wish to purchase/return: ')
        try:
            id_input = int(id_input)
        except:
            print('Input was invalid.')
            continue
        if id_input == 0:
            action = 1
        else:
            for prod in list_products:
                if prod.get_id() == id_input:
                    action = 1
            if action == 0:
                print('Input was invalid.')
    return id_input


def updated_inventory(list_products):
    updated_inv_txt = open('Updated_Inventory.txt', 'w')
    for prod in list_products:
        updated_inv_txt.write(str(prod.get_id()) + '\n')
        updated_inv_txt.write(str(prod.get_name()) + '\n')
        updated_inv_txt.write(str(prod.get_stock()) + '\n')
        updated_inv_txt.write(str(prod.get_price()) + '\n')
        
        
def print_invoice(customer_list):
    item_total = 0
    subtotal = 0
    
    for prod in customer_list:
        item_total = item_total + prod.get_qty()
        subtotal = subtotal + prod.calc_cost()
        
    if item_total != 0:
        print('ID \t\tItem \t\t\t\t\t\t\t\t Price \t Stock')
        for prod in customer_list:
            print(prod)
        tax = subtotal * 0.085
        total = subtotal + tax
        print('\nPrice: $' + format(subtotal, '.2f'), sep = '')
        print('Tax: $' + format(tax, '.2f'), sep = '')
        print('Total: $' + format(total, '.2f'), sep = '')
    else:
        print('Error in printing invoice. Please try again.')
        
def main():
    list_products = process_inventory()
    customer_list = []
    action = 0
    while action == 0:
        print_inventory(list_products)
        id_input = get_item_id(list_products)
        qty_action = False
        if id_input == 0:
            qty_action = True
            action = 1
        while qty_action == False:
            qty_purch = input('Please enter the desired quantity (negative quantity for returns): ')
            try:
                qty_purch = int(qty_purch)
                for prod in list_products:
                    if prod.get_id() == id_input:
                        if qty_purch > 0:
                            qty_action = prod.purchase(qty_purch)
                        else:
                            qty_action = prod.restock(qty_purch)
                            
                        #qty_action == True would mean that the product was succesfully updated with the restock or purchase amount
                        if qty_action == True:
                            transaction = TransactionItem.TransactionItem
                            prod_transaction = transaction(prod.get_id(), prod.get_name(), qty_purch, prod.get_price())
                            prod_transaction.get_id()
                            customer_list.append(prod_transaction)
            except:
                print('\nSorry, we do not have enough stock.\n')
                print_inventory(list_products)
            if qty_action == False:
                print('\nSorry, we do not have enough stock.\n')
                print_inventory(list_products)
    print_invoice(customer_list)
    updated_inventory(list_products)
  
main()
